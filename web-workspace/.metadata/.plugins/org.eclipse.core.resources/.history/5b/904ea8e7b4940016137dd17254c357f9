<?php
require_once 'C:\Users\Andre\Desktop\Andrei\Projects\ECSE321\EventRegistrationApplication\workspace-web\EventRegistration\EventRegistration\controller\Controller.php';
require_once 'C:\Users\Andre\Desktop\Andrei\Projects\ECSE321\EventRegistrationApplication\workspace-web\EventRegistration\EventRegistration\persistence\PersistenceEventRegistration.php';
require_once 'C:\Users\Andre\Desktop\Andrei\Projects\ECSE321\EventRegistrationApplication\workspace-web\EventRegistration\EventRegistration\model\RegistrationManager.php';
require_once 'C:\Users\Andre\Desktop\Andrei\Projects\ECSE321\EventRegistrationApplication\workspace-web\EventRegistration\EventRegistration\model\Participant.php';
require_once 'C:\Users\Andre\Desktop\Andrei\Projects\ECSE321\EventRegistrationApplication\workspace-web\EventRegistration\EventRegistration\model\Event.php';

class ControllerTest extends PHPUnit_Framework_TestCase
{
    protected $c;
    protected $pm;
    protected $rm;

    protected function setUp()
    {
        $this->c = new Controller();
        $this->pm = new PersistenceEventRegistration();
        $this->rm = $this->pm->loadDataFromStore();
        $this->rm->delete();
        $this->pm->writeDataToStore($this->rm);
    }

    protected function tearDown()
    {
    }

    public function testCreateParticipant() {
        $this->assertEquals(0, count($this->rm->getParticipants()));
    
    	$name = "Oscar";
    
    	try {
    		$this->c->createParticipant($name);
    	} catch (Exception $e) {
    		// check that no error occurred
    		$this->fail();
    	}
    
    	// check file contents
    	$this->rm = $this->pm->loadDataFromStore();
    	$this->assertEquals(1, count($this->rm->getParticipants()));
    	$this->assertEquals($name, $this->rm->getParticipant_index(0)->getName());
    	$this->assertEquals(0, count($this->rm->getEvents()));
    	$this->assertEquals(0, count($this->rm->getRegistrations()));
    }
    
    public function testCreateParticipantNull() {
        $this->assertEquals(0, count($this->rm->getParticipants()));
    
    	$name = null;
    
    	$error = "";
    	try {
    		$this->c->createParticipant($name);
    	} catch (Exception $e) {
			$error = $e->getMessage();
    	}
    
    	// check error
    	$this->assertEquals("Participant name cannot be empty!", $error);
        // check file contents
    	$this->rm = $this->pm->loadDataFromStore();
    	$this->assertEquals(0, count($this->rm->getParticipants()));
    	$this->assertEquals(0, count($this->rm->getEvents()));
    	$this->assertEquals(0, count($this->rm->getRegistrations()));
    }
    
    public function testCreateParticipantEmpty() {
    	$this->assertEquals(0, count($this->rm->getParticipants()));
    
    	$name = "";
    
    	$error = "";
    	try {
    		$this->c->createParticipant($name);
    	} catch (Exception $e) {
    		$error = $e->getMessage();
    	}
    
    	// check error
    	$this->assertEquals("Participant name cannot be empty!", $error);
    	// check file contents
    	$this->rm = $this->pm->loadDataFromStore();
    	$this->assertEquals(0, count($this->rm->getParticipants()));
    	$this->assertEquals(0, count($this->rm->getEvents()));
    	$this->assertEquals(0, count($this->rm->getRegistrations()));
    }
    
    public function testCreateParticipantSpaces() {
    	$this->assertEquals(0, count($this->rm->getParticipants()));
    
    	$name = " ";
    
    	$error = "";
    	try {
    		$this->c->createParticipant($name);
    	} catch (Exception $e) {
    		$error = $e->getMessage();
    	}
    
    	// check error
    	$this->assertEquals("Participant name cannot be empty!", $error);
    	// check file contents
    	$this->rm = $this->pm->loadDataFromStore();
    	$this->assertEquals(0, count($this->rm->getParticipants()));
    	$this->assertEquals(0, count($this->rm->getEvents()));
    	$this->assertEquals(0, count($this->rm->getRegistrations()));
    }
?>